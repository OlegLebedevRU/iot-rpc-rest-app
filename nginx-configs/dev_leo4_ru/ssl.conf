

server {
    ##
    # SSL Settings
    ##
    set $cors "1";
    set $leo4_cloud_host "https://d5ducjnc3s38o5qqk84q.apigw.yandexcloud.net";
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
    ssl_prefer_server_ciphers on;
	listen 443 default_server ssl;
    listen [::]:443 ssl;
	server_name dev.leo4.ru;
	ssl_certificate /etc/nginx/ssl/live/dev.leo4.ru/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/dev.leo4.ru/privkey.pem;
		#ssl_certificate /etc/letsencrypt/live/dev.leo4.ru/fullchain.pem;
		#ssl_certificate_key /etc/letsencrypt/live/dev.leo4.ru/privkey.pem;
	## jwt on
	auth_jwt_enabled on;
    auth_jwt_algorithm 'RS256';
	auth_jwt_redirect off;
	auth_jwt_key "-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqX393A/1A+OW9ISPrWbK
/qodWp7xMd0clA7VwGoOK6fW0Q0m7iwUoBk6PfyaUZPToIlMMn07x3OR3Idf9rdH
ZBTxYaIVBOTAC3/a9uLMi/ElLf8u1xxNffByUEbWL6lMViQgoSkxh2zLckSyvsyH
S2TMrSh4Lcq8d+QOVupgh/dOguLn8BXgVHgLtsrGJ7DqL78mwbJ6emp+LV+zeUot
xT03UwxmgFKr1AZnRGZI1Zp/xEUSYc1hX9ZzrF01jiNi1ln3NNxTqCWxpnlICxhh
QNF68AUG012qLnykaKak+9TclImCG+i+Giuj+Qc5B4j6J46kfLVZA/Ra64ugTbZy
nQIDAQAB
-----END PUBLIC KEY-----";
	#auth_jwt_enabled on;
	#auth_jwt_algorithm 'RS256';
	#auth_jwt_redirect off;
	#auth_jwt_location HEADER=auth-token;  # get the JWT from the "auth-token" header
    #auth_jwt_location COOKIE=auth-token;  # get the JWT from the "auth-token" cookie
    #Set to a space-delimited list of claims to extract from the JWT and set as request headers. These will be accessible via e.g: $http_jwt_sub
    #auth_jwt_extract_request_claims orgId userId roleId;

	location /ssl-test {
	    auth_jwt_enabled off;
        add_header Content-Type text/html;
        return 200 '<html><body><h1>SSL TEST</h2></body></html>';
        #proxy_pass http://app;
    }
    resolver 127.0.0.11 valid=10s;
    set $backend1 http://app1:8000;

     location /rmq {
        auth_jwt_enabled off;
        set $rmq http://rabbitmq:15672;
        proxy_pass $rmq;
        rewrite ^/rmq(.*)$ $1 break;
    }
    location /pgadmin {
        auth_jwt_enabled off;
        proxy_pass http://pgadmin:80;
        proxy_redirect http:// $scheme://;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Script-Name /pgadmin;
    }
    # swagger docs
    location ~ ^/docs(.*)$ {
        auth_jwt_enabled off;
        proxy_pass $backend1/docs$1$is_args$args;
    }

    location = /openapi.json {
        auth_jwt_enabled off;
        proxy_pass $backend1/openapi.json;
    }
    location /favicon.ico {
        auth_jwt_enabled off;
        root /var/share/nginx/html;
        try_files $uri /favicon.ico;
    }
    location ~ ^/api/v1/(.*)$ {
        auth_jwt_location HEADER=accessToken;
        #auth_jwt_validate_sub on;
        auth_jwt_extract_var_claims orgId;
        proxy_set_header orgId $jwt_claim_orgId;
        # $jwt_claim_
        #auth_jwt_extract_request_claims orgId userId roleId;
        proxy_pass $backend1/api/v1/$1$is_args$args;
    }
    location ~ ^/private/api/v1/(.*)$ {
        auth_jwt_location COOKIE=accessToken;
        auth_jwt_extract_var_claims orgId;
        proxy_set_header orgId $jwt_claim_orgId;
        #proxy_set_header orgId '0';
        # $jwt_claim_
        #auth_jwt_extract_request_claims orgId userId roleId;
        if ($cors = "1") {
          add_header Access-Control-Allow-Credentials true;
          add_header Access-Control-Allow-Origin $http_origin;
        }

      # OPTIONS (pre-flight) request from allowed CORS domain. return response directly
        if ($request_method = 'OPTIONS') {
           add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
           add_header Access-Control-Allow-Credentials true;
           add_header Access-Control-Allow-Origin $http_origin;
           add_header Access-Control-Allow-Headers 'Authorization,Origin,Content-Type,Accept,Connection,orgId';
           add_header Content-Length 0;
           add_header Content-Type text/plain;
           return 204;
        }

        proxy_pass $backend1/api/v1/$1$is_args$args;
    }
    # test frontend
    location ~ ^/test/api/v1/(.*)$ {
        auth_jwt_enabled off;
        proxy_set_header orgId '0';
        add_header Access-Control-Allow-Origin * always;
        add_header Vary "Origin" always;
        #proxy_set_header orgId '0';
        # $jwt_claim_
        #auth_jwt_extract_request_claims orgId userId roleId;
        #if ($cors = "1") {
        #  add_header Access-Control-Allow-Credentials true;
        #  add_header Access-Control-Allow-Origin $http_origin;
        #}

      # OPTIONS (pre-flight) request from allowed CORS domain. return response directly
        if ($request_method = 'OPTIONS') {
           add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE' always;
           add_header Access-Control-Allow-Credentials true always;
           add_header Access-Control-Allow-Origin $http_origin always;
           add_header Access-Control-Allow-Headers 'Authorization,Origin,Content-Type,Accept,Connection,orgId' always;
           add_header Content-Length 0;
           add_header Content-Type text/plain;
           return 204;
        }

        proxy_pass $backend1/api/v1/$1$is_args$args;
    }


    location = /private/refresh/ {
        auth_jwt_location COOKIE=refreshToken;
        #auth_jwt_validate_sub on;
        auth_jwt_redirect on;
        auth_jwt_loginurl /login;
        # $jwt_claim_
        #auth_jwt_extract_request_claims orgId userId roleId;
        proxy_pass $leo4_cloud_host/account/refresh/;
    }
    location = /api/login/ {
        auth_jwt_enabled off;
        proxy_pass $leo4_cloud_host/account/login2/;
    }
    location = /api/refresh/ {
        auth_jwt_location HEADER=refreshToken;
        #auth_jwt_validate_sub on;
        proxy_set_header Authorization 'Bearer $http_refreshToken';
        proxy_pass $leo4_cloud_host/account/refresh2/;
    }
    location = /device/list/ {
        auth_jwt_location HEADER=accessToken;
        #auth_jwt_validate_sub on;
        proxy_set_header Authorization 'Bearer $http_accessToken';
        proxy_pass $leo4_cloud_host/device/list;
    }
    location /login {
        # static page login/index.html
        auth_jwt_enabled off;
        root /var/share/nginx/html;
        try_files $uri /login/index.html;
    }
    location ~ ^/public/login/ {
        auth_jwt_enabled off;
      # Append CORS headers to any request from allowed CORS domain, except OPTIONS
        if ($cors = "1") {
          add_header Access-Control-Allow-Credentials true;
          add_header Access-Control-Allow-Origin $http_origin;
        }

      # OPTIONS (pre-flight) request from allowed CORS domain. return response directly
        if ($request_method = 'OPTIONS') {
           add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS, PUT, DELETE';
           add_header Access-Control-Allow-Credentials true;
           add_header Access-Control-Allow-Origin $http_origin;
           add_header Access-Control-Allow-Headers 'Authorization,Origin,Content-Type,Accept,Connection';
           add_header Content-Length 0;
           add_header Content-Type text/plain;
           return 204;
        }

        #proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass $leo4_cloud_host/account/login;
        proxy_http_version 1.1;
    }
    location = /private/token/ {
        auth_jwt_location COOKIE=accessToken;
        #auth_jwt_validate_sub on;
        #auth_jwt_redirect on;
        #auth_jwt_loginurl https://$host/account/refresh/;
        auth_jwt_extract_var_claims orgId;
        proxy_set_header org-id $jwt_claim_orgId;
        # $jwt_claim_
        #auth_jwt_extract_request_claims orgId userId roleId;
        proxy_pass $backend1/api/v1/accounts;
    }
    location / {
        auth_jwt_location COOKIE=accessToken;
        #auth_jwt_validate_sub on;
        root /var/share/nginx/html;
        try_files $uri /index.html;
    }
}
