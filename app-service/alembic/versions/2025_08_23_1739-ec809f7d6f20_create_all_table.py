"""create all table

Revision ID: ec809f7d6f20
Revises:
Create Date: 2025-08-23 17:39:23.694096

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "ec809f7d6f20"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tb_dev_tasks",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("device_id", sa.Integer(), nullable=False),
        sa.Column("method_code", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tb_dev_tasks")),
    )
    op.create_index(
        op.f("ix_tb_dev_tasks_device_id"),
        "tb_dev_tasks",
        ["device_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tb_dev_tasks_id"), "tb_dev_tasks", ["id"], unique=False
    )
    op.create_table(
        "tb_devices",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("device_id", sa.Integer(), nullable=False),
        sa.Column("sn", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tb_devices")),
        sa.UniqueConstraint("device_id", name=op.f("uq_tb_devices_device_id")),
    )
    op.create_table(
        "tb_persistent_variables",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("var_key", sa.String(), nullable=False),
        sa.Column("var_val", sa.String(), nullable=False),
        sa.Column("var_typ", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tb_persistent_variables")),
    )
    op.create_table(
        "tb_dev_task_payloads",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Uuid(), nullable=False),
        sa.Column("payload", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tb_dev_tasks.id"],
            name=op.f("fk_tb_dev_task_payloads_task_id_tb_dev_tasks"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tb_dev_task_payloads")),
    )
    op.create_table(
        "tb_dev_task_results",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Uuid(), nullable=False),
        sa.Column("result", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tb_dev_tasks.id"],
            name=op.f("fk_tb_dev_task_results_task_id_tb_dev_tasks"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tb_dev_task_results")),
    )
    op.create_table(
        "tb_dev_tasks_status",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Uuid(), nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column("ttl", sa.Integer(), nullable=False),
        sa.Column("pending_at", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["tb_dev_tasks.id"],
            name=op.f("fk_tb_dev_tasks_status_task_id_tb_dev_tasks"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tb_dev_tasks_status")),
    )
    op.create_index(
        op.f("ix_tb_dev_tasks_status_priority"),
        "tb_dev_tasks_status",
        ["priority"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tb_dev_tasks_status_status"),
        "tb_dev_tasks_status",
        ["status"],
        unique=False,
    )
    op.create_index(
        op.f("ix_tb_dev_tasks_status_task_id"),
        "tb_dev_tasks_status",
        ["task_id"],
        unique=False,
    )
    op.create_table(
        "tb_device_connections",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("device_id", sa.Integer(), nullable=False),
        sa.Column("connected_at", sa.Integer(), nullable=False),
        sa.Column("checked_at", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["device_id"],
            ["tb_devices.device_id"],
            name=op.f("fk_tb_device_connections_device_id_tb_devices"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tb_device_connections")),
        sa.UniqueConstraint(
            "device_id", name=op.f("uq_tb_device_connections_device_id")
        ),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("tb_device_connections")
    op.drop_index(
        op.f("ix_tb_dev_tasks_status_task_id"),
        table_name="tb_dev_tasks_status",
    )
    op.drop_index(
        op.f("ix_tb_dev_tasks_status_status"), table_name="tb_dev_tasks_status"
    )
    op.drop_index(
        op.f("ix_tb_dev_tasks_status_priority"),
        table_name="tb_dev_tasks_status",
    )
    op.drop_table("tb_dev_tasks_status")
    op.drop_table("tb_dev_task_results")
    op.drop_table("tb_dev_task_payloads")
    op.drop_table("tb_persistent_variables")
    op.drop_table("tb_devices")
    op.drop_index(op.f("ix_tb_dev_tasks_id"), table_name="tb_dev_tasks")
    op.drop_index(op.f("ix_tb_dev_tasks_device_id"), table_name="tb_dev_tasks")
    op.drop_table("tb_dev_tasks")
    # ### end Alembic commands ###
