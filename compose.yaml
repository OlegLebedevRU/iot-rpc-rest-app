services:
  app1:
    build:
      dockerfile: ./docker-files/app-service/Dockerfile
      context: ./
    environment:
      APP_CONFIG__DB__URL: postgresql+asyncpg://user:password@pg:5432/postgres
      APP_CONFIG__DB__ECHO: 0
      APP_CONFIG__GUNICORN__WORKERS: 1
      APP_CONFIG__FASTSTREAM__URL: amqp://user:root@rabbitmq:5672//
    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync+restart
          path: app-service
          target: /app
          # Exclude the project virtual environment â€” it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
    depends_on:
        pg:
          condition: service_healthy
  rabbitmq:
    image: rabbitmq:4-management-alpine
    hostname: rabbitmq
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15671:15671"
      - "15672:15672"
      - "1883:1883"
      #- "8883:8883" ssl listener
    environment:
      RABBITMQ_DEFAULT_USER: "user"
      RABBITMQ_DEFAULT_PASS: "root"
    configs:
      - source: plugins
        target: /etc/rabbitmq/enabled_plugins
    volumes:
      - ./rmq/rabbitmq-data:/var/lib/rabbitmq
      - ./rmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rmq/definitions.json:/etc/rabbitmq/definitions.json:ro
      # -  config volume
  pg:
    image: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pgpass
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 3s
      retries: 3

  # adminer:
    # image: adminer
    # ports:
      # - "8080:8080"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: info@platerra.ru
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
  nginx:
    build:
      dockerfile: ./docker-files/nginx-jwt/Dockerfile
      args:
        CONF_FILE: ./nginx-configs/local-light/nginx.conf
      context: ./
    ports:
        - "80:80"
    volumes:
      - type: bind
        source: ./nginx-configs/local-light/nginx.test.conf
        target: target=/etc/nginx/nginx.conf
        read_only: true

  avahi:
    image: ydkn/avahi
    hostname: $HOSTNAME
    network_mode: host
    volumes:
      - ./avahi-services:/etc/avahi/services:ro
    restart: always
configs:
  plugins:
    content: |
      rabbitmq_management
      rabbitmq_mqtt
volumes:
  pgdata:
  rabbitmq-data: