services:
  app1:
    build:
      dockerfile: ./docker-files/app-service/Dockerfile
      context: ./
 #   environment:
   #   APP_CONFIG__DB__URL: postgresql+asyncpg://user:password@pg:5432/postgres
   #   APP_CONFIG__DB__ECHO: 0
    #  APP_CONFIG__GUNICORN__WORKERS: 1
    #  APP_CONFIG__FASTSTREAM__URL: amqp://user:root@rabbitmq:5672//
    develop:
      # Create a `watch` configuration to update the app
      # https://docs.docker.com/compose/file-watch/#compose-watch-versus-bind-mounts
      watch:
        # Sync the working directory with the `/app` directory in the container
        - action: sync+restart
          path: app-service
          target: /app
          # Exclude the project virtual environment â€” it could be for a
          # different platform in the container
          ignore:
            - .venv/

        # Rebuild the image if dependencies change by checking uv.lock
        - action: rebuild
          path: ./uv.lock
    depends_on:
        pg:
          condition: service_healthy
    container_name: app1
    networks:
      - rabbitmq_network
      - pg_network
    volumes:
      - ./logs:/var/log/app
  rabbitmq:
    image: rabbitmq:4-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      #- "15672:15672" # RabbitMQ Management UI
      #- "1883:1883"
      - "8883:8883"
      - "5672:5672" # RabbitMQ AMQP
    environment:
      RABBITMQ_HOST: '%'
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: root
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
    configs:
      - source: plugins
        target: /etc/rabbitmq/enabled_plugins
    volumes:
      - type: bind
        source: ./rmq/rabbitmq.conf
        target: /etc/rabbitmq/rabbitmq.conf
        read_only: true
      - type: bind
        source: ./rmq/definitions.json
        target: /etc/rabbitmq/definitions.json
        read_only: true
        # certs
      - type: bind
        source: ./crt/iot_leo4_ca.crt
        target: /crt/ca_certificate.pem
        read_only: true
      - type: bind
        source: ./crt/cert_0000.pem
        target: /crt/server_certificate.pem
        read_only: true
      - type: bind
        source: ./crt/key_0000.pem
        target: /crt/server_key.pem
        read_only: true
#ssl_options.cacertfile = /crt/ca_certificate.pem
#ssl_options.certfile   = /crt/server_certificate.pem
#ssl_options.keyfile    = /crt/server_key.pem
      #- ./rmq/rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - rabbitmq_network
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics", "-q", "ping" ]
      retries: 3
      timeout: 5s
      interval: 30s
  pg:
    image: postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pgpass
      PGDATA: /var/lib/postgresql/data
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - pg_network
  # adminer:
    # image: adminer
    # ports:
      # - "8080:8080"

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: info@platerra.ru
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    #ports:
    #  - "5050:80"
    networks:
      - pg_network
  nginx:
    build:
      dockerfile: ./docker-files/nginx-jwt/Dockerfile
      context: ./
    ports:
        - "80:80"
        - "443:443"
        - "4443:4443"
    restart: always
    volumes:
      - type: bind
        source: ./nginx-configs/dev_leo4_ru
        target: /etc/nginx/conf.d
        read_only: true
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
      - type: bind
        source: ./crt/iot_leo4_ca.crt
        target: /crt/ca_certificate.pem
        read_only: true
      - type: bind
        source: ./crt/cert_0000.pem
        target: /crt/server_certificate.pem
        read_only: true
      - type: bind
        source: ./crt/key_0000.pem
        target: /crt/server_key.pem
        read_only: true
      - ./nginx/html:/var/share/nginx/html
    networks:
      - rabbitmq_network

  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

# docker compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ -d dev.leo4.ru
# docker compose run --rm certbot renew


  avahi:
    image: ydkn/avahi
    hostname: '%'
    #$HOSTNAME
    network_mode: host
    volumes:
      - ./avahi-services:/etc/avahi/services:ro
    restart: always
configs:
  plugins:
    content: "[rabbitmq_management, rabbitmq_mqtt]."
volumes:
  pgdata:
  rabbitmq_data:
    driver: local

networks:
  rabbitmq_network:
    driver: bridge
  pg_network:
    driver: bridge